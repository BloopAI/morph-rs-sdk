/*
 * MorphVM API
 *
 * REST API for managing MorphVM instances and snapshots.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BootInstanceRequest {
    #[serde(rename = "vcpus", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub vcpus: Option<Option<i32>>,
    #[serde(rename = "memory", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub memory: Option<Option<i32>>,
    #[serde(rename = "disk_size", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub disk_size: Option<Option<i32>>,
    #[serde(rename = "metadata", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Option<std::collections::HashMap<String, String>>>,
    #[serde(rename = "ttl_seconds", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ttl_seconds: Option<Option<i32>>,
    #[serde(rename = "ttl_action", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ttl_action: Option<Option<TtlAction>>,
}

impl BootInstanceRequest {
    pub fn new() -> BootInstanceRequest {
        BootInstanceRequest {
            vcpus: None,
            memory: None,
            disk_size: None,
            metadata: None,
            ttl_seconds: None,
            ttl_action: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TtlAction {
    #[serde(rename = "stop")]
    Stop,
    #[serde(rename = "pause")]
    Pause,
}

impl Default for TtlAction {
    fn default() -> TtlAction {
        Self::Stop
    }
}

