/*
 * MorphVM API
 *
 * REST API for managing MorphVM instances and snapshots.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateSnapshotRequest {
    #[serde(rename = "image_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub image_id: Option<Option<String>>,
    #[serde(rename = "readiness_check", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub readiness_check: Option<Option<Box<models::TimeoutCheck>>>,
    /// Number of vCPUs
    #[serde(rename = "vcpus", skip_serializing_if = "Option::is_none")]
    pub vcpus: Option<i32>,
    /// Memory in MB
    #[serde(rename = "memory", skip_serializing_if = "Option::is_none")]
    pub memory: Option<i32>,
    /// Size of the disk in MB
    #[serde(rename = "disk_size", skip_serializing_if = "Option::is_none")]
    pub disk_size: Option<i32>,
    #[serde(rename = "digest", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub digest: Option<Option<String>>,
    #[serde(rename = "metadata", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Option<std::collections::HashMap<String, String>>>,
}

impl CreateSnapshotRequest {
    pub fn new() -> CreateSnapshotRequest {
        CreateSnapshotRequest {
            image_id: None,
            readiness_check: None,
            vcpus: None,
            memory: None,
            disk_size: None,
            digest: None,
            metadata: None,
        }
    }
}

