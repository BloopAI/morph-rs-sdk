/*
 * MorphVM API
 *
 * REST API for managing MorphVM instances and snapshots.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SnapshotModel {
    /// Unique identifier for the snapshot, like snapshot_xxxx
    #[serde(rename = "id")]
    pub id: String,
    /// Object type, always 'snapshot'
    #[serde(rename = "object", skip_serializing_if = "Option::is_none")]
    pub object: Option<Object>,
    /// Unix timestamp of when the snapshot was created
    #[serde(rename = "created")]
    pub created: i32,
    /// Status of the snapshot
    #[serde(rename = "status")]
    pub status: models::SnapshotStatus,
    #[serde(rename = "spec")]
    pub spec: Box<models::ResourceSpec>,
    #[serde(rename = "refs")]
    pub refs: Box<models::SnapshotRefs>,
    #[serde(rename = "digest", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub digest: Option<Option<String>>,
    /// User provided metadata for the snapshot
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<std::collections::HashMap<String, String>>,
}

impl SnapshotModel {
    pub fn new(id: String, created: i32, status: models::SnapshotStatus, spec: models::ResourceSpec, refs: models::SnapshotRefs) -> SnapshotModel {
        SnapshotModel {
            id,
            object: None,
            created,
            status,
            spec: Box::new(spec),
            refs: Box::new(refs),
            digest: None,
            metadata: None,
        }
    }
}
/// Object type, always 'snapshot'
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "snapshot")]
    Snapshot,
}

impl Default for Object {
    fn default() -> Object {
        Self::Snapshot
    }
}

