/*
 * MorphVM API
 *
 * REST API for managing MorphVM instances and snapshots.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateTtlRequest {
    /// New TTL in seconds
    #[serde(rename = "ttl_seconds")]
    pub ttl_seconds: i32,
    #[serde(rename = "ttl_action", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ttl_action: Option<Option<TtlAction>>,
}

impl UpdateTtlRequest {
    pub fn new(ttl_seconds: i32) -> UpdateTtlRequest {
        UpdateTtlRequest {
            ttl_seconds,
            ttl_action: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TtlAction {
    #[serde(rename = "stop")]
    Stop,
    #[serde(rename = "pause")]
    Pause,
}

impl Default for TtlAction {
    fn default() -> TtlAction {
        Self::Stop
    }
}

