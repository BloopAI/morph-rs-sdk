/*
 * MorphVM API
 *
 * REST API for managing MorphVM instances and snapshots.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InstanceTtl {
    #[serde(rename = "ttl_seconds", deserialize_with = "Option::deserialize")]
    pub ttl_seconds: Option<i32>,
    #[serde(rename = "ttl_expire_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ttl_expire_at: Option<Option<i32>>,
    /// Action to take when the instance expires
    #[serde(rename = "ttl_action")]
    pub ttl_action: models::InstanceExpireAction,
}

impl InstanceTtl {
    pub fn new(ttl_seconds: Option<i32>, ttl_action: models::InstanceExpireAction) -> InstanceTtl {
        InstanceTtl {
            ttl_seconds,
            ttl_expire_at: None,
            ttl_action,
        }
    }
}

