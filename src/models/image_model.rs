/*
 * MorphVM API
 *
 * REST API for managing MorphVM instances and snapshots.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ImageModel {
    /// Unique identifier for the base image, like img_xxxx
    #[serde(rename = "id")]
    pub id: String,
    /// Object type, always 'image'
    #[serde(rename = "object", skip_serializing_if = "Option::is_none")]
    pub object: Option<Object>,
    /// Unix timestamp of when the base image was created
    #[serde(rename = "created")]
    pub created: i32,
    /// Name of the base image
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    /// Size of the base image in bytes
    #[serde(rename = "disk_size")]
    pub disk_size: i32,
}

impl ImageModel {
    pub fn new(id: String, created: i32, name: String, disk_size: i32) -> ImageModel {
        ImageModel {
            id,
            object: None,
            created,
            name,
            description: None,
            disk_size,
        }
    }
}
/// Object type, always 'image'
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "image")]
    Image,
}

impl Default for Object {
    fn default() -> Object {
        Self::Image
    }
}

