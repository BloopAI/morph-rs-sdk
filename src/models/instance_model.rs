/*
 * MorphVM API
 *
 * REST API for managing MorphVM instances and snapshots.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InstanceModel {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "object", skip_serializing_if = "Option::is_none")]
    pub object: Option<Object>,
    #[serde(rename = "created")]
    pub created: i32,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<models::InstanceStatus>,
    #[serde(rename = "spec")]
    pub spec: Box<models::ResourceSpec>,
    #[serde(rename = "refs")]
    pub refs: Box<models::InstanceRefs>,
    #[serde(rename = "networking")]
    pub networking: Box<models::InstanceNetworking>,
    /// User provided metadata for the instance
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<std::collections::HashMap<String, String>>,
    /// Time to live settings for the instance. If not set, the instance will not expire.
    #[serde(rename = "ttl")]
    pub ttl: Box<models::InstanceTtl>,
    /// Wake on settings for the instance. If not set, the instance will not wake on access.
    #[serde(rename = "wake_on")]
    pub wake_on: Box<models::InstanceWakeOn>,
}

impl InstanceModel {
    pub fn new(id: String, created: i32, spec: models::ResourceSpec, refs: models::InstanceRefs, networking: models::InstanceNetworking, ttl: models::InstanceTtl, wake_on: models::InstanceWakeOn) -> InstanceModel {
        InstanceModel {
            id,
            object: None,
            created,
            status: None,
            spec: Box::new(spec),
            refs: Box::new(refs),
            networking: Box::new(networking),
            metadata: None,
            ttl: Box::new(ttl),
            wake_on: Box::new(wake_on),
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "instance")]
    Instance,
}

impl Default for Object {
    fn default() -> Object {
        Self::Instance
    }
}

