/*
 * MorphVM API
 *
 * REST API for managing MorphVM instances and snapshots.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`create_snapshot_snapshot_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSnapshotSnapshotPostError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_snapshot_snapshot_snapshot_id_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSnapshotSnapshotSnapshotIdDeleteError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_snapshot_snapshot_snapshot_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSnapshotSnapshotSnapshotIdGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_snapshots_snapshot_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListSnapshotsSnapshotGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`set_snapshot_metadata_snapshot_snapshot_id_metadata_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetSnapshotMetadataSnapshotSnapshotIdMetadataPostError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}


/// Create a snapshot from an image.  Snapshots are point-in-time copies of a running instance that can be used to create new instances.
pub async fn create_snapshot_snapshot_post(configuration: &configuration::Configuration, create_snapshot_request: models::CreateSnapshotRequest) -> Result<models::SnapshotModel, Error<CreateSnapshotSnapshotPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_create_snapshot_request = create_snapshot_request;

    let uri_str = format!("{}/snapshot", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_create_snapshot_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SnapshotModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SnapshotModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateSnapshotSnapshotPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Delete a snapshot by ID.
pub async fn delete_snapshot_snapshot_snapshot_id_delete(configuration: &configuration::Configuration, snapshot_id: &str) -> Result<(), Error<DeleteSnapshotSnapshotSnapshotIdDeleteError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_snapshot_id = snapshot_id;

    let uri_str = format!("{}/snapshot/{snapshot_id}", configuration.base_path, snapshot_id=crate::apis::urlencode(p_snapshot_id));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteSnapshotSnapshotSnapshotIdDeleteError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get a snapshot by ID.
pub async fn get_snapshot_snapshot_snapshot_id_get(configuration: &configuration::Configuration, snapshot_id: &str) -> Result<models::SnapshotModel, Error<GetSnapshotSnapshotSnapshotIdGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_snapshot_id = snapshot_id;

    let uri_str = format!("{}/snapshot/{snapshot_id}", configuration.base_path, snapshot_id=crate::apis::urlencode(p_snapshot_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SnapshotModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SnapshotModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetSnapshotSnapshotSnapshotIdGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// List snapshots.
pub async fn list_snapshots_snapshot_get(configuration: &configuration::Configuration, digest: Option<&str>, metadata: Option<std::collections::HashMap<String, String>>) -> Result<models::SnapshotModelCollection, Error<ListSnapshotsSnapshotGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_digest = digest;
    let p_metadata = metadata;

    let uri_str = format!("{}/snapshot", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_digest {
        req_builder = req_builder.query(&[("digest", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_metadata {
        let mut query_params = Vec::with_capacity(param_value.len());
        for (key, value) in param_value.iter() {
            query_params.push((key.to_string(), serde_json::to_string(value)?));
        }
        req_builder = req_builder.query(&query_params);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SnapshotModelCollection`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SnapshotModelCollection`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListSnapshotsSnapshotGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Set metadata for a snapshot.
pub async fn set_snapshot_metadata_snapshot_snapshot_id_metadata_post(configuration: &configuration::Configuration, snapshot_id: &str, request_body: std::collections::HashMap<String, String>) -> Result<models::SnapshotModel, Error<SetSnapshotMetadataSnapshotSnapshotIdMetadataPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_snapshot_id = snapshot_id;
    let p_request_body = request_body;

    let uri_str = format!("{}/snapshot/{snapshot_id}/metadata", configuration.base_path, snapshot_id=crate::apis::urlencode(p_snapshot_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_request_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SnapshotModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SnapshotModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SetSnapshotMetadataSnapshotSnapshotIdMetadataPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

